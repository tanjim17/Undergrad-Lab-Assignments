diff --git a/Makefile b/Makefile
index 09d790c..2d82712 100644
--- a/Makefile
+++ b/Makefile
@@ -181,6 +181,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_mt\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -248,7 +249,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 # check in that version.
 
 EXTRA=\
-	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
+	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c mt.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
diff --git a/defs.h b/defs.h
index 82fb982..84c8e8c 100644
--- a/defs.h
+++ b/defs.h
@@ -52,6 +52,14 @@ struct inode*   nameiparent(char*, char*);
 int             readi(struct inode*, char*, uint, uint);
 void            stati(struct inode*, struct stat*);
 int             writei(struct inode*, char*, uint, uint);
+int             createSwapFile(struct proc* p);
+int             readFromSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size);
+int             writeToSwapFile(struct proc* p, char* buffer, uint placeOnFile, uint size);
+int             removeSwapFile(struct proc* p);
+int 			page_out(struct proc * p, uint va, pde_t *pgdir, uint ref, uint mod);
+int 			page_in(struct proc * p, int mem_pg_info_idx, uint va, char* buff);
+void 			copy_swap_file(struct proc* src, struct proc* dst);
+
 
 // ide.c
 void            ideinit(void);
@@ -120,10 +128,16 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+uint			is_shell_or_init(struct proc* p);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
 
+// sysfile
+struct inode*   create(char *path, short type, short major, short minor);
+int             isdirempty(struct inode *dp);
+
+
 // spinlock.c
 void            acquire(struct spinlock*);
 void            getcallerpcs(void*, uint*);
@@ -186,5 +200,27 @@ void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
 
+uint get_pa(int va, pde_t *pgdir);
+
+void update_pageout_flags(struct proc* p, int va, pde_t * pgdir);
+void update_pagein_flags(struct proc* p, int va, int pagePAddr, pde_t * pgdir);
+
+void insert_mem_pg_info(struct proc *p, pde_t *pgdir, uint va);
+void reset_mem_pg_info(struct proc *p, int index);
+void remove_pg_from_mem(struct proc *p, uint va, const pde_t *pgdir);
+
+uint is_queue_full(const struct proc* p);
+int get_queue_tail_idx(const struct proc *p);
+int get_queue_head_idx(const struct proc *p);
+void adjust_queue(struct proc *p,int from);
+void shift_queue_head(struct proc* p);
+
+int swap_in(struct proc* p, int cr2);
+void swap_out(struct proc *p);
+uint is_page_in_disk(struct proc *p, int va);
+
+int get_nru_free_slot_idx(const struct proc *p);
+int get_nru_oldest_idx(const struct proc *p);
+
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/fs.c b/fs.c
index f77275f..210ef0c 100644
--- a/fs.c
+++ b/fs.c
@@ -668,3 +668,190 @@ nameiparent(char *path, char *name)
 {
   return namex(path, 1, name);
 }
+
+// NEW FOR PAGING
+
+#include "fcntl.h"
+#define DIGITS 14
+
+char* itoa(int i, char b[]){
+    char const digit[] = "0123456789";
+    char* p = b;
+    if(i<0){
+        *p++ = '-';
+        i *= -1;
+    }
+    int shifter = i;
+    do{ //Move to where representation ends
+        ++p;
+        shifter = shifter/10;
+    }while(shifter);
+    *p = '\0';
+    do{ //Move back, inserting digits as u go
+        *--p = digit[i%10];
+        i = i/10;
+    }while(i);
+    return b;
+}
+
+//remove swap file of proc p;
+int
+removeSwapFile(struct proc* p)
+{
+	//path of proccess
+	char path[DIGITS];
+	memmove(path,"/.swap", 6);
+	itoa(p->pid, path+ 6);
+
+	struct inode *ip, *dp;
+	struct dirent de;
+	char name[DIRSIZ];
+	uint off;
+
+	if(0 == p->swapFile)
+	{
+		return -1;
+	}
+	fileclose(p->swapFile);
+
+	begin_op();
+	if((dp = nameiparent(path, name)) == 0)
+	{
+		end_op();
+		return -1;
+	}
+
+	ilock(dp);
+
+	  // Cannot unlink "." or "..".
+	if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+	   goto bad;
+
+	if((ip = dirlookup(dp, name, &off)) == 0)
+		goto bad;
+	ilock(ip);
+
+	if(ip->nlink < 1)
+		panic("unlink: nlink < 1");
+	if(ip->type == T_DIR && !isdirempty(ip)){
+		iunlockput(ip);
+		goto bad;
+	}
+
+	memset(&de, 0, sizeof(de));
+	if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+		panic("unlink: writei");
+	if(ip->type == T_DIR){
+		dp->nlink--;
+		iupdate(dp);
+	}
+	iunlockput(dp);
+
+	ip->nlink--;
+	iupdate(ip);
+	iunlockput(ip);
+
+	end_op();
+
+	return 0;
+
+	bad:
+		iunlockput(dp);
+		end_op();
+		return -1;
+
+}
+
+
+//return 0 on success
+int
+createSwapFile(struct proc* p)
+{
+
+	char path[DIGITS];
+	memmove(path,"/.swap", 6);
+	itoa(p->pid, path+ 6);
+
+    begin_op();
+    struct inode * in = create(path, T_FILE, 0, 0);
+	iunlock(in);
+
+	p->swapFile = filealloc();
+	if (p->swapFile == 0)
+		panic("no slot for files on /store");
+
+	p->swapFile->ip = in;
+	p->swapFile->type = FD_INODE;
+	p->swapFile->off = 0;
+	p->swapFile->readable = O_WRONLY;
+	p->swapFile->writable = O_RDWR;
+    end_op();
+
+    return 0;
+}
+
+//return as sys_write (-1 when error)
+int
+writeToSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size)
+{
+	p->swapFile->off = placeOnFile;
+
+	return filewrite(p->swapFile, buffer, size);
+
+}
+
+//return as sys_read (-1 when error)
+int
+readFromSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size)
+{
+	p->swapFile->off = placeOnFile;
+
+	return fileread(p->swapFile, buffer,  size);
+}
+
+int page_in(struct proc* p, int mem_pg_info_idx, uint va, char* buff) {
+  int val = -1;
+  for (int i = 0; i < (MAX_TOTAL_PAGES - MAX_PSYC_PAGES); i++) {
+    if (p->disk_pg_info[i].va == va) {
+      val = readFromSwapFile(p, buff, i*PGSIZE, PGSIZE);
+      if (val == -1) break;
+      p->mem_pg_info[mem_pg_info_idx] = p->disk_pg_info[i];
+      p->mem_pg_info[mem_pg_info_idx].ref = 1;
+      p->disk_pg_info[i].state = NOT_USED;
+      break;
+    }
+  }
+  return val;
+}
+
+int page_out(struct proc * p, uint va, pde_t *pgdir, uint ref, uint mod) {
+  int idx = -1;
+  for (int i = 0; i < (MAX_TOTAL_PAGES - MAX_PSYC_PAGES); i++) {
+    if (p->disk_pg_info[i].state == NOT_USED) {
+      if(writeToSwapFile(p, (char*)va, PGSIZE*i, PGSIZE) == -1) return -1;
+      idx = i;
+      p->disk_pg_info[idx].state = USED;
+      p->disk_pg_info[idx].va = va;
+      p->disk_pg_info[idx].pgdir = pgdir;
+      p->disk_pg_info[idx].ref = ref;
+      p->disk_pg_info[idx].mod = mod;
+      break;
+    }
+  }
+  return idx;
+}
+
+void copy_swap_file(struct proc* src, struct proc* dst){
+  if (is_shell_or_init(src)) return;
+
+  char buff[PGSIZE];
+  for (int i=0; i < (MAX_TOTAL_PAGES - MAX_PSYC_PAGES); i++){
+    if (src->disk_pg_info[i].state == USED){
+      if (readFromSwapFile(src, buff, PGSIZE*i, PGSIZE) != PGSIZE)
+        panic("copy_swap_file: error in reading from swap file!");    
+      if (writeToSwapFile(dst, buff, PGSIZE*i, PGSIZE) != PGSIZE)
+        panic("copy_swap_file: error in writing to swap file!");
+      dst->disk_pg_info[i].state = USED;
+    }
+  }
+}
\ No newline at end of file
diff --git a/fs.c.orig b/fs.c.orig
new file mode 100644
index 0000000..f77275f
--- /dev/null
+++ b/fs.c.orig
@@ -0,0 +1,670 @@
+// File system implementation.  Five layers:
+//   + Blocks: allocator for raw disk blocks.
+//   + Log: crash recovery for multi-step updates.
+//   + Files: inode allocator, reading, writing, metadata.
+//   + Directories: inode with special contents (list of other inodes!)
+//   + Names: paths like /usr/rtm/xv6/fs.c for convenient naming.
+//
+// This file contains the low-level file system manipulation
+// routines.  The (higher-level) system call implementations
+// are in sysfile.c.
+
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "stat.h"
+#include "mmu.h"
+#include "proc.h"
+#include "spinlock.h"
+#include "sleeplock.h"
+#include "fs.h"
+#include "buf.h"
+#include "file.h"
+
+#define min(a, b) ((a) < (b) ? (a) : (b))
+static void itrunc(struct inode*);
+// there should be one superblock per disk device, but we run with
+// only one device
+struct superblock sb; 
+
+// Read the super block.
+void
+readsb(int dev, struct superblock *sb)
+{
+  struct buf *bp;
+
+  bp = bread(dev, 1);
+  memmove(sb, bp->data, sizeof(*sb));
+  brelse(bp);
+}
+
+// Zero a block.
+static void
+bzero(int dev, int bno)
+{
+  struct buf *bp;
+
+  bp = bread(dev, bno);
+  memset(bp->data, 0, BSIZE);
+  log_write(bp);
+  brelse(bp);
+}
+
+// Blocks.
+
+// Allocate a zeroed disk block.
+static uint
+balloc(uint dev)
+{
+  int b, bi, m;
+  struct buf *bp;
+
+  bp = 0;
+  for(b = 0; b < sb.size; b += BPB){
+    bp = bread(dev, BBLOCK(b, sb));
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+      m = 1 << (bi % 8);
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+        bp->data[bi/8] |= m;  // Mark block in use.
+        log_write(bp);
+        brelse(bp);
+        bzero(dev, b + bi);
+        return b + bi;
+      }
+    }
+    brelse(bp);
+  }
+  panic("balloc: out of blocks");
+}
+
+// Free a disk block.
+static void
+bfree(int dev, uint b)
+{
+  struct buf *bp;
+  int bi, m;
+
+  bp = bread(dev, BBLOCK(b, sb));
+  bi = b % BPB;
+  m = 1 << (bi % 8);
+  if((bp->data[bi/8] & m) == 0)
+    panic("freeing free block");
+  bp->data[bi/8] &= ~m;
+  log_write(bp);
+  brelse(bp);
+}
+
+// Inodes.
+//
+// An inode describes a single unnamed file.
+// The inode disk structure holds metadata: the file's type,
+// its size, the number of links referring to it, and the
+// list of blocks holding the file's content.
+//
+// The inodes are laid out sequentially on disk at
+// sb.startinode. Each inode has a number, indicating its
+// position on the disk.
+//
+// The kernel keeps a cache of in-use inodes in memory
+// to provide a place for synchronizing access
+// to inodes used by multiple processes. The cached
+// inodes include book-keeping information that is
+// not stored on disk: ip->ref and ip->valid.
+//
+// An inode and its in-memory representation go through a
+// sequence of states before they can be used by the
+// rest of the file system code.
+//
+// * Allocation: an inode is allocated if its type (on disk)
+//   is non-zero. ialloc() allocates, and iput() frees if
+//   the reference and link counts have fallen to zero.
+//
+// * Referencing in cache: an entry in the inode cache
+//   is free if ip->ref is zero. Otherwise ip->ref tracks
+//   the number of in-memory pointers to the entry (open
+//   files and current directories). iget() finds or
+//   creates a cache entry and increments its ref; iput()
+//   decrements ref.
+//
+// * Valid: the information (type, size, &c) in an inode
+//   cache entry is only correct when ip->valid is 1.
+//   ilock() reads the inode from
+//   the disk and sets ip->valid, while iput() clears
+//   ip->valid if ip->ref has fallen to zero.
+//
+// * Locked: file system code may only examine and modify
+//   the information in an inode and its content if it
+//   has first locked the inode.
+//
+// Thus a typical sequence is:
+//   ip = iget(dev, inum)
+//   ilock(ip)
+//   ... examine and modify ip->xxx ...
+//   iunlock(ip)
+//   iput(ip)
+//
+// ilock() is separate from iget() so that system calls can
+// get a long-term reference to an inode (as for an open file)
+// and only lock it for short periods (e.g., in read()).
+// The separation also helps avoid deadlock and races during
+// pathname lookup. iget() increments ip->ref so that the inode
+// stays cached and pointers to it remain valid.
+//
+// Many internal file system functions expect the caller to
+// have locked the inodes involved; this lets callers create
+// multi-step atomic operations.
+//
+// The icache.lock spin-lock protects the allocation of icache
+// entries. Since ip->ref indicates whether an entry is free,
+// and ip->dev and ip->inum indicate which i-node an entry
+// holds, one must hold icache.lock while using any of those fields.
+//
+// An ip->lock sleep-lock protects all ip-> fields other than ref,
+// dev, and inum.  One must hold ip->lock in order to
+// read or write that inode's ip->valid, ip->size, ip->type, &c.
+
+struct {
+  struct spinlock lock;
+  struct inode inode[NINODE];
+} icache;
+
+void
+iinit(int dev)
+{
+  int i = 0;
+  
+  initlock(&icache.lock, "icache");
+  for(i = 0; i < NINODE; i++) {
+    initsleeplock(&icache.inode[i].lock, "inode");
+  }
+
+  readsb(dev, &sb);
+  cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
+ inodestart %d bmap start %d\n", sb.size, sb.nblocks,
+          sb.ninodes, sb.nlog, sb.logstart, sb.inodestart,
+          sb.bmapstart);
+}
+
+static struct inode* iget(uint dev, uint inum);
+
+//PAGEBREAK!
+// Allocate an inode on device dev.
+// Mark it as allocated by  giving it type type.
+// Returns an unlocked but allocated and referenced inode.
+struct inode*
+ialloc(uint dev, short type)
+{
+  int inum;
+  struct buf *bp;
+  struct dinode *dip;
+
+  for(inum = 1; inum < sb.ninodes; inum++){
+    bp = bread(dev, IBLOCK(inum, sb));
+    dip = (struct dinode*)bp->data + inum%IPB;
+    if(dip->type == 0){  // a free inode
+      memset(dip, 0, sizeof(*dip));
+      dip->type = type;
+      log_write(bp);   // mark it allocated on the disk
+      brelse(bp);
+      return iget(dev, inum);
+    }
+    brelse(bp);
+  }
+  panic("ialloc: no inodes");
+}
+
+// Copy a modified in-memory inode to disk.
+// Must be called after every change to an ip->xxx field
+// that lives on disk, since i-node cache is write-through.
+// Caller must hold ip->lock.
+void
+iupdate(struct inode *ip)
+{
+  struct buf *bp;
+  struct dinode *dip;
+
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+  dip = (struct dinode*)bp->data + ip->inum%IPB;
+  dip->type = ip->type;
+  dip->major = ip->major;
+  dip->minor = ip->minor;
+  dip->nlink = ip->nlink;
+  dip->size = ip->size;
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+  log_write(bp);
+  brelse(bp);
+}
+
+// Find the inode with number inum on device dev
+// and return the in-memory copy. Does not lock
+// the inode and does not read it from disk.
+static struct inode*
+iget(uint dev, uint inum)
+{
+  struct inode *ip, *empty;
+
+  acquire(&icache.lock);
+
+  // Is the inode already cached?
+  empty = 0;
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+      ip->ref++;
+      release(&icache.lock);
+      return ip;
+    }
+    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
+      empty = ip;
+  }
+
+  // Recycle an inode cache entry.
+  if(empty == 0)
+    panic("iget: no inodes");
+
+  ip = empty;
+  ip->dev = dev;
+  ip->inum = inum;
+  ip->ref = 1;
+  ip->valid = 0;
+  release(&icache.lock);
+
+  return ip;
+}
+
+// Increment reference count for ip.
+// Returns ip to enable ip = idup(ip1) idiom.
+struct inode*
+idup(struct inode *ip)
+{
+  acquire(&icache.lock);
+  ip->ref++;
+  release(&icache.lock);
+  return ip;
+}
+
+// Lock the given inode.
+// Reads the inode from disk if necessary.
+void
+ilock(struct inode *ip)
+{
+  struct buf *bp;
+  struct dinode *dip;
+
+  if(ip == 0 || ip->ref < 1)
+    panic("ilock");
+
+  acquiresleep(&ip->lock);
+
+  if(ip->valid == 0){
+    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+    dip = (struct dinode*)bp->data + ip->inum%IPB;
+    ip->type = dip->type;
+    ip->major = dip->major;
+    ip->minor = dip->minor;
+    ip->nlink = dip->nlink;
+    ip->size = dip->size;
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+    brelse(bp);
+    ip->valid = 1;
+    if(ip->type == 0)
+      panic("ilock: no type");
+  }
+}
+
+// Unlock the given inode.
+void
+iunlock(struct inode *ip)
+{
+  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
+    panic("iunlock");
+
+  releasesleep(&ip->lock);
+}
+
+// Drop a reference to an in-memory inode.
+// If that was the last reference, the inode cache entry can
+// be recycled.
+// If that was the last reference and the inode has no links
+// to it, free the inode (and its content) on disk.
+// All calls to iput() must be inside a transaction in
+// case it has to free the inode.
+void
+iput(struct inode *ip)
+{
+  acquiresleep(&ip->lock);
+  if(ip->valid && ip->nlink == 0){
+    acquire(&icache.lock);
+    int r = ip->ref;
+    release(&icache.lock);
+    if(r == 1){
+      // inode has no links and no other references: truncate and free.
+      itrunc(ip);
+      ip->type = 0;
+      iupdate(ip);
+      ip->valid = 0;
+    }
+  }
+  releasesleep(&ip->lock);
+
+  acquire(&icache.lock);
+  ip->ref--;
+  release(&icache.lock);
+}
+
+// Common idiom: unlock, then put.
+void
+iunlockput(struct inode *ip)
+{
+  iunlock(ip);
+  iput(ip);
+}
+
+//PAGEBREAK!
+// Inode content
+//
+// The content (data) associated with each inode is stored
+// in blocks on the disk. The first NDIRECT block numbers
+// are listed in ip->addrs[].  The next NINDIRECT blocks are
+// listed in block ip->addrs[NDIRECT].
+
+// Return the disk block address of the nth block in inode ip.
+// If there is no such block, bmap allocates one.
+static uint
+bmap(struct inode *ip, uint bn)
+{
+  uint addr, *a;
+  struct buf *bp;
+
+  if(bn < NDIRECT){
+    if((addr = ip->addrs[bn]) == 0)
+      ip->addrs[bn] = addr = balloc(ip->dev);
+    return addr;
+  }
+  bn -= NDIRECT;
+
+  if(bn < NINDIRECT){
+    // Load indirect block, allocating if necessary.
+    if((addr = ip->addrs[NDIRECT]) == 0)
+      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+    bp = bread(ip->dev, addr);
+    a = (uint*)bp->data;
+    if((addr = a[bn]) == 0){
+      a[bn] = addr = balloc(ip->dev);
+      log_write(bp);
+    }
+    brelse(bp);
+    return addr;
+  }
+
+  panic("bmap: out of range");
+}
+
+// Truncate inode (discard contents).
+// Only called when the inode has no links
+// to it (no directory entries referring to it)
+// and has no in-memory reference to it (is
+// not an open file or current directory).
+static void
+itrunc(struct inode *ip)
+{
+  int i, j;
+  struct buf *bp;
+  uint *a;
+
+  for(i = 0; i < NDIRECT; i++){
+    if(ip->addrs[i]){
+      bfree(ip->dev, ip->addrs[i]);
+      ip->addrs[i] = 0;
+    }
+  }
+
+  if(ip->addrs[NDIRECT]){
+    bp = bread(ip->dev, ip->addrs[NDIRECT]);
+    a = (uint*)bp->data;
+    for(j = 0; j < NINDIRECT; j++){
+      if(a[j])
+        bfree(ip->dev, a[j]);
+    }
+    brelse(bp);
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+    ip->addrs[NDIRECT] = 0;
+  }
+
+  ip->size = 0;
+  iupdate(ip);
+}
+
+// Copy stat information from inode.
+// Caller must hold ip->lock.
+void
+stati(struct inode *ip, struct stat *st)
+{
+  st->dev = ip->dev;
+  st->ino = ip->inum;
+  st->type = ip->type;
+  st->nlink = ip->nlink;
+  st->size = ip->size;
+}
+
+//PAGEBREAK!
+// Read data from inode.
+// Caller must hold ip->lock.
+int
+readi(struct inode *ip, char *dst, uint off, uint n)
+{
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
+      return -1;
+    return devsw[ip->major].read(ip, dst, n);
+  }
+
+  if(off > ip->size || off + n < off)
+    return -1;
+  if(off + n > ip->size)
+    n = ip->size - off;
+
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+    m = min(n - tot, BSIZE - off%BSIZE);
+    memmove(dst, bp->data + off%BSIZE, m);
+    brelse(bp);
+  }
+  return n;
+}
+
+// PAGEBREAK!
+// Write data to inode.
+// Caller must hold ip->lock.
+int
+writei(struct inode *ip, char *src, uint off, uint n)
+{
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
+      return -1;
+    return devsw[ip->major].write(ip, src, n);
+  }
+
+  if(off > ip->size || off + n < off)
+    return -1;
+  if(off + n > MAXFILE*BSIZE)
+    return -1;
+
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+    m = min(n - tot, BSIZE - off%BSIZE);
+    memmove(bp->data + off%BSIZE, src, m);
+    log_write(bp);
+    brelse(bp);
+  }
+
+  if(n > 0 && off > ip->size){
+    ip->size = off;
+    iupdate(ip);
+  }
+  return n;
+}
+
+//PAGEBREAK!
+// Directories
+
+int
+namecmp(const char *s, const char *t)
+{
+  return strncmp(s, t, DIRSIZ);
+}
+
+// Look for a directory entry in a directory.
+// If found, set *poff to byte offset of entry.
+struct inode*
+dirlookup(struct inode *dp, char *name, uint *poff)
+{
+  uint off, inum;
+  struct dirent de;
+
+  if(dp->type != T_DIR)
+    panic("dirlookup not DIR");
+
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+      panic("dirlookup read");
+    if(de.inum == 0)
+      continue;
+    if(namecmp(name, de.name) == 0){
+      // entry matches path element
+      if(poff)
+        *poff = off;
+      inum = de.inum;
+      return iget(dp->dev, inum);
+    }
+  }
+
+  return 0;
+}
+
+// Write a new directory entry (name, inum) into the directory dp.
+int
+dirlink(struct inode *dp, char *name, uint inum)
+{
+  int off;
+  struct dirent de;
+  struct inode *ip;
+
+  // Check that name is not present.
+  if((ip = dirlookup(dp, name, 0)) != 0){
+    iput(ip);
+    return -1;
+  }
+
+  // Look for an empty dirent.
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+      panic("dirlink read");
+    if(de.inum == 0)
+      break;
+  }
+
+  strncpy(de.name, name, DIRSIZ);
+  de.inum = inum;
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+    panic("dirlink");
+
+  return 0;
+}
+
+//PAGEBREAK!
+// Paths
+
+// Copy the next path element from path into name.
+// Return a pointer to the element following the copied one.
+// The returned path has no leading slashes,
+// so the caller can check *path=='\0' to see if the name is the last one.
+// If no name to remove, return 0.
+//
+// Examples:
+//   skipelem("a/bb/c", name) = "bb/c", setting name = "a"
+//   skipelem("///a//bb", name) = "bb", setting name = "a"
+//   skipelem("a", name) = "", setting name = "a"
+//   skipelem("", name) = skipelem("////", name) = 0
+//
+static char*
+skipelem(char *path, char *name)
+{
+  char *s;
+  int len;
+
+  while(*path == '/')
+    path++;
+  if(*path == 0)
+    return 0;
+  s = path;
+  while(*path != '/' && *path != 0)
+    path++;
+  len = path - s;
+  if(len >= DIRSIZ)
+    memmove(name, s, DIRSIZ);
+  else {
+    memmove(name, s, len);
+    name[len] = 0;
+  }
+  while(*path == '/')
+    path++;
+  return path;
+}
+
+// Look up and return the inode for a path name.
+// If parent != 0, return the inode for the parent and copy the final
+// path element into name, which must have room for DIRSIZ bytes.
+// Must be called inside a transaction since it calls iput().
+static struct inode*
+namex(char *path, int nameiparent, char *name)
+{
+  struct inode *ip, *next;
+
+  if(*path == '/')
+    ip = iget(ROOTDEV, ROOTINO);
+  else
+    ip = idup(myproc()->cwd);
+
+  while((path = skipelem(path, name)) != 0){
+    ilock(ip);
+    if(ip->type != T_DIR){
+      iunlockput(ip);
+      return 0;
+    }
+    if(nameiparent && *path == '\0'){
+      // Stop one level early.
+      iunlock(ip);
+      return ip;
+    }
+    if((next = dirlookup(ip, name, 0)) == 0){
+      iunlockput(ip);
+      return 0;
+    }
+    iunlockput(ip);
+    ip = next;
+  }
+  if(nameiparent){
+    iput(ip);
+    return 0;
+  }
+  return ip;
+}
+
+struct inode*
+namei(char *path)
+{
+  char name[DIRSIZ];
+  return namex(path, 0, name);
+}
+
+struct inode*
+nameiparent(char *path, char *name)
+{
+  return namex(path, 1, name);
+}
diff --git a/mmu.h b/mmu.h
index a82d8e2..aec4420 100644
--- a/mmu.h
+++ b/mmu.h
@@ -95,6 +95,8 @@ struct segdesc {
 #define PTE_W           0x002   // Writeable
 #define PTE_U           0x004   // User
 #define PTE_PS          0x080   // Page Size
+#define PTE_A           0x020   // Accessed
+#define PTE_PG          0x200   // Paged out to secondary storage
 
 // Address in page table or page directory entry
 #define PTE_ADDR(pte)   ((uint)(pte) & ~0xFFF)
diff --git a/mt.c b/mt.c
new file mode 100644
index 0000000..fdc0ee5
--- /dev/null
+++ b/mt.c
@@ -0,0 +1,23 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "param.h"
+#include "mmu.h"
+#include "proc.h"
+
+void memtest(){
+	int currsize = (uint)sbrk(0);
+	printf(1, "starting addr: %d\n", currsize);
+	for (int i = currsize; i < MAX_TOTAL_PAGES * PGSIZE; i += PGSIZE) {
+		sbrk(PGSIZE);
+	}
+	if((uint)sbrk(0) != MAX_TOTAL_PAGES * PGSIZE) {
+		printf(1, "error!");
+		return;
+	}
+}
+
+int main(int argc, char *argv[]){
+	memtest();
+	exit();
+}
\ No newline at end of file
diff --git a/proc.c b/proc.c
index 806b1b1..b04fdb6 100644
--- a/proc.c
+++ b/proc.c
@@ -14,6 +14,11 @@ struct {
 
 static struct proc *initproc;
 
+struct pgmap {
+  uint vpn;
+  uint ppn;
+};
+
 int nextpid = 1;
 extern void forkret(void);
 extern void trapret(void);
@@ -112,6 +117,18 @@ found:
   memset(p->context, 0, sizeof *p->context);
   p->context->eip = (uint)forkret;
 
+  // paging: initializing paging stuff
+	if(!is_shell_or_init(p)) {
+    createSwapFile(p);
+    p->mem_pg_count = 0;
+    p->pg_fault_count = 0;
+    p->queue_head_idx=0;
+    for(int i = 0; i < MAX_PSYC_PAGES; i++)
+      p->mem_pg_info[i].state = NOT_USED;
+    for(int i = 0; i < MAX_TOTAL_PAGES - MAX_PSYC_PAGES; i++)
+      p->disk_pg_info[i].state = NOT_USED;
+  }
+
   return p;
 }
 
@@ -218,6 +235,19 @@ fork(void)
 
   release(&ptable.lock);
 
+   // paging: copy parent info
+  if (!is_shell_or_init(curproc)) {
+    copy_swap_file(curproc, np);
+    for (i = 0; i < MAX_PSYC_PAGES; i++){
+      np->mem_pg_info[i] = curproc->mem_pg_info[i];
+      np->mem_pg_info[i].pgdir = np->pgdir;
+    }
+    for (i = 0; i < (MAX_TOTAL_PAGES - MAX_PSYC_PAGES); i++){
+      np->disk_pg_info[i] = curproc->disk_pg_info[i];
+      np->disk_pg_info[i].pgdir = np->pgdir;
+    }
+  }
+
   return pid;
 }
 
@@ -234,6 +264,27 @@ exit(void)
   if(curproc == initproc)
     panic("init exiting");
 
+  // paging: remove swap file and paging info
+  if(!is_shell_or_init(curproc)) {
+    if (removeSwapFile(curproc) != 0)
+      panic("exit: error in deleting swap file!");
+    curproc->mem_pg_count = 0;
+    curproc->pg_fault_count = 0;
+    curproc->queue_head_idx = 0;
+    for (int i = 0; i < MAX_PSYC_PAGES; ++i) {
+      curproc->mem_pg_info[i].state = NOT_USED;
+      curproc->mem_pg_info[i].va = 0;
+      curproc->mem_pg_info[i].ref = 0;
+      curproc->mem_pg_info[i].mod = 0;
+    }
+    for (int i = 0; i < (MAX_TOTAL_PAGES - MAX_PSYC_PAGES); ++i) {
+      curproc->disk_pg_info[i].state = NOT_USED;
+      curproc->disk_pg_info[i].va = 0;
+      curproc->disk_pg_info[i].ref = 0;
+      curproc->disk_pg_info[i].mod = 0;
+    }
+  }
+
   // Close all open files.
   for(fd = 0; fd < NOFILE; fd++){
     if(curproc->ofile[fd]){
@@ -459,9 +510,17 @@ wakeup1(void *chan)
 {
   struct proc *p;
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+    if(p->state == SLEEPING && p->chan == chan) {
       p->state = RUNNABLE;
+      for (int i = 0; i < MAX_PSYC_PAGES; ++i) {
+        p->mem_pg_info[i].ref = 0;
+      }
+      for (int i = 0; i < MAX_TOTAL_PAGES - MAX_PSYC_PAGES; ++i) {
+        p->disk_pg_info[i].ref = 0;
+      }
+    }
+  }
 }
 
 // Wake up all processes sleeping on chan.
@@ -529,6 +588,44 @@ procdump(void)
       for(i=0; i<10 && pc[i] != 0; i++)
         cprintf(" %p", pc[i]);
     }
+
+    pde_t* pgdir = p->pgdir;
+    cprintf("\nPage tables:\n\tmemory location of page directory = 0x%x\n", V2P(pgdir));
+
+    for(i = 0; i < NPDENTRIES; i++) {
+      uint pde = pgdir[i];
+      if((pde & PTE_P) && (pde & PTE_U)) {
+        uint pgtab_pa = PTE_ADDR(pde);
+        uint pgtab_ppn = pde >> PTXSHIFT;
+        pte_t* pgtab = (pte_t*)P2V(pgtab_pa);
+
+        uint j, user_pg_count = 0;
+        struct pgmap map[NPTENTRIES];
+        for(j = 0; j < NPTENTRIES; j++) {
+          uint pte = pgtab[j];
+          if((pte & PTE_P) && (pte & PTE_U)) {
+            if(!user_pg_count) {
+              cprintf("\tpdir PTE %d, %d:\n\t\tmemory location of page table = ​0x%x\n", i, pgtab_ppn, pgtab_pa);
+            }
+            uint pa = PTE_ADDR(pte);
+            uint ppn = pte >> PTXSHIFT;
+            cprintf("\t\tptbl PTE %d, %d, 0x%x\n", j, ppn, pa);
+            map[user_pg_count].vpn = (i << 10) + j;
+            map[user_pg_count++].ppn = ppn;
+          }
+        }
+        if(user_pg_count) {
+          cprintf("\t\tPage mappings:\n");
+          for(j = 0; j < user_pg_count; j++) {
+            cprintf("\t\t%d -> %d\n", map[j].vpn, map[j].ppn);
+          }
+        }
+      }
+    }
     cprintf("\n");
   }
 }
+
+uint is_shell_or_init(struct proc* p){
+  return p && p->pid <= 2;
+}
\ No newline at end of file
diff --git a/proc.h b/proc.h
index 1647114..47b1d1f 100644
--- a/proc.h
+++ b/proc.h
@@ -1,3 +1,6 @@
+#define MAX_TOTAL_PAGES 30
+#define MAX_PSYC_PAGES 15
+
 // Per-CPU state
 struct cpu {
   uchar apicid;                // Local APIC ID
@@ -32,6 +35,15 @@ struct context {
   uint eip;
 };
 
+enum pg_state {NOT_USED, USED};
+struct pg_info {
+  enum pg_state state;  
+  uint va;
+  pde_t* pgdir;
+  uint ref; // reference bit
+  uint mod; // modify bit
+};
+
 enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
 // Per-process state
@@ -49,6 +61,13 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  //Swap file. must initiate with create swap file
+  struct file *swapFile;			//page file
+  struct pg_info mem_pg_info[MAX_PSYC_PAGES];
+  struct pg_info disk_pg_info[MAX_TOTAL_PAGES - MAX_PSYC_PAGES];
+  uint queue_head_idx;
+  uint mem_pg_count;
+  uint pg_fault_count;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/sysfile.c b/sysfile.c
index bfe61b7..bf3848e 100644
--- a/sysfile.c
+++ b/sysfile.c
@@ -165,7 +165,7 @@ bad:
 }
 
 // Is the directory dp empty except for "." and ".." ?
-static int
+int
 isdirempty(struct inode *dp)
 {
   int off;
@@ -238,7 +238,7 @@ bad:
   return -1;
 }
 
-static struct inode*
+struct inode*
 create(char *path, short type, short major, short minor)
 {
   struct inode *ip, *dp;
diff --git a/sysfile.c.orig b/sysfile.c.orig
new file mode 100644
index 0000000..bfe61b7
--- /dev/null
+++ b/sysfile.c.orig
@@ -0,0 +1,444 @@
+//
+// File-system system calls.
+// Mostly argument checking, since we don't trust
+// user code, and calls into file.c and fs.c.
+//
+
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "stat.h"
+#include "mmu.h"
+#include "proc.h"
+#include "fs.h"
+#include "spinlock.h"
+#include "sleeplock.h"
+#include "file.h"
+#include "fcntl.h"
+
+// Fetch the nth word-sized system call argument as a file descriptor
+// and return both the descriptor and the corresponding struct file.
+static int
+argfd(int n, int *pfd, struct file **pf)
+{
+  int fd;
+  struct file *f;
+
+  if(argint(n, &fd) < 0)
+    return -1;
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+    return -1;
+  if(pfd)
+    *pfd = fd;
+  if(pf)
+    *pf = f;
+  return 0;
+}
+
+// Allocate a file descriptor for the given file.
+// Takes over file reference from caller on success.
+static int
+fdalloc(struct file *f)
+{
+  int fd;
+  struct proc *curproc = myproc();
+
+  for(fd = 0; fd < NOFILE; fd++){
+    if(curproc->ofile[fd] == 0){
+      curproc->ofile[fd] = f;
+      return fd;
+    }
+  }
+  return -1;
+}
+
+int
+sys_dup(void)
+{
+  struct file *f;
+  int fd;
+
+  if(argfd(0, 0, &f) < 0)
+    return -1;
+  if((fd=fdalloc(f)) < 0)
+    return -1;
+  filedup(f);
+  return fd;
+}
+
+int
+sys_read(void)
+{
+  struct file *f;
+  int n;
+  char *p;
+
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+    return -1;
+  return fileread(f, p, n);
+}
+
+int
+sys_write(void)
+{
+  struct file *f;
+  int n;
+  char *p;
+
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+    return -1;
+  return filewrite(f, p, n);
+}
+
+int
+sys_close(void)
+{
+  int fd;
+  struct file *f;
+
+  if(argfd(0, &fd, &f) < 0)
+    return -1;
+  myproc()->ofile[fd] = 0;
+  fileclose(f);
+  return 0;
+}
+
+int
+sys_fstat(void)
+{
+  struct file *f;
+  struct stat *st;
+
+  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
+    return -1;
+  return filestat(f, st);
+}
+
+// Create the path new as a link to the same inode as old.
+int
+sys_link(void)
+{
+  char name[DIRSIZ], *new, *old;
+  struct inode *dp, *ip;
+
+  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
+    return -1;
+
+  begin_op();
+  if((ip = namei(old)) == 0){
+    end_op();
+    return -1;
+  }
+
+  ilock(ip);
+  if(ip->type == T_DIR){
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+
+  ip->nlink++;
+  iupdate(ip);
+  iunlock(ip);
+
+  if((dp = nameiparent(new, name)) == 0)
+    goto bad;
+  ilock(dp);
+  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
+    iunlockput(dp);
+    goto bad;
+  }
+  iunlockput(dp);
+  iput(ip);
+
+  end_op();
+
+  return 0;
+
+bad:
+  ilock(ip);
+  ip->nlink--;
+  iupdate(ip);
+  iunlockput(ip);
+  end_op();
+  return -1;
+}
+
+// Is the directory dp empty except for "." and ".." ?
+static int
+isdirempty(struct inode *dp)
+{
+  int off;
+  struct dirent de;
+
+  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+      panic("isdirempty: readi");
+    if(de.inum != 0)
+      return 0;
+  }
+  return 1;
+}
+
+//PAGEBREAK!
+int
+sys_unlink(void)
+{
+  struct inode *ip, *dp;
+  struct dirent de;
+  char name[DIRSIZ], *path;
+  uint off;
+
+  if(argstr(0, &path) < 0)
+    return -1;
+
+  begin_op();
+  if((dp = nameiparent(path, name)) == 0){
+    end_op();
+    return -1;
+  }
+
+  ilock(dp);
+
+  // Cannot unlink "." or "..".
+  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+    goto bad;
+
+  if((ip = dirlookup(dp, name, &off)) == 0)
+    goto bad;
+  ilock(ip);
+
+  if(ip->nlink < 1)
+    panic("unlink: nlink < 1");
+  if(ip->type == T_DIR && !isdirempty(ip)){
+    iunlockput(ip);
+    goto bad;
+  }
+
+  memset(&de, 0, sizeof(de));
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+    panic("unlink: writei");
+  if(ip->type == T_DIR){
+    dp->nlink--;
+    iupdate(dp);
+  }
+  iunlockput(dp);
+
+  ip->nlink--;
+  iupdate(ip);
+  iunlockput(ip);
+
+  end_op();
+
+  return 0;
+
+bad:
+  iunlockput(dp);
+  end_op();
+  return -1;
+}
+
+static struct inode*
+create(char *path, short type, short major, short minor)
+{
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if((dp = nameiparent(path, name)) == 0)
+    return 0;
+  ilock(dp);
+
+  if((ip = dirlookup(dp, name, 0)) != 0){
+    iunlockput(dp);
+    ilock(ip);
+    if(type == T_FILE && ip->type == T_FILE)
+      return ip;
+    iunlockput(ip);
+    return 0;
+  }
+
+  if((ip = ialloc(dp->dev, type)) == 0)
+    panic("create: ialloc");
+
+  ilock(ip);
+  ip->major = major;
+  ip->minor = minor;
+  ip->nlink = 1;
+  iupdate(ip);
+
+  if(type == T_DIR){  // Create . and .. entries.
+    dp->nlink++;  // for ".."
+    iupdate(dp);
+    // No ip->nlink++ for ".": avoid cyclic ref count.
+    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
+      panic("create dots");
+  }
+
+  if(dirlink(dp, name, ip->inum) < 0)
+    panic("create: dirlink");
+
+  iunlockput(dp);
+
+  return ip;
+}
+
+int
+sys_open(void)
+{
+  char *path;
+  int fd, omode;
+  struct file *f;
+  struct inode *ip;
+
+  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
+    return -1;
+
+  begin_op();
+
+  if(omode & O_CREATE){
+    ip = create(path, T_FILE, 0, 0);
+    if(ip == 0){
+      end_op();
+      return -1;
+    }
+  } else {
+    if((ip = namei(path)) == 0){
+      end_op();
+      return -1;
+    }
+    ilock(ip);
+    if(ip->type == T_DIR && omode != O_RDONLY){
+      iunlockput(ip);
+      end_op();
+      return -1;
+    }
+  }
+
+  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
+    if(f)
+      fileclose(f);
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+  end_op();
+
+  f->type = FD_INODE;
+  f->ip = ip;
+  f->off = 0;
+  f->readable = !(omode & O_WRONLY);
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+  return fd;
+}
+
+int
+sys_mkdir(void)
+{
+  char *path;
+  struct inode *ip;
+
+  begin_op();
+  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+  end_op();
+  return 0;
+}
+
+int
+sys_mknod(void)
+{
+  struct inode *ip;
+  char *path;
+  int major, minor;
+
+  begin_op();
+  if((argstr(0, &path)) < 0 ||
+     argint(1, &major) < 0 ||
+     argint(2, &minor) < 0 ||
+     (ip = create(path, T_DEV, major, minor)) == 0){
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+  end_op();
+  return 0;
+}
+
+int
+sys_chdir(void)
+{
+  char *path;
+  struct inode *ip;
+  struct proc *curproc = myproc();
+  
+  begin_op();
+  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
+    end_op();
+    return -1;
+  }
+  ilock(ip);
+  if(ip->type != T_DIR){
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+  iput(curproc->cwd);
+  end_op();
+  curproc->cwd = ip;
+  return 0;
+}
+
+int
+sys_exec(void)
+{
+  char *path, *argv[MAXARG];
+  int i;
+  uint uargv, uarg;
+
+  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+    return -1;
+  }
+  memset(argv, 0, sizeof(argv));
+  for(i=0;; i++){
+    if(i >= NELEM(argv))
+      return -1;
+    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
+      return -1;
+    if(uarg == 0){
+      argv[i] = 0;
+      break;
+    }
+    if(fetchstr(uarg, &argv[i]) < 0)
+      return -1;
+  }
+  return exec(path, argv);
+}
+
+int
+sys_pipe(void)
+{
+  int *fd;
+  struct file *rf, *wf;
+  int fd0, fd1;
+
+  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
+    return -1;
+  if(pipealloc(&rf, &wf) < 0)
+    return -1;
+  fd0 = -1;
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+    if(fd0 >= 0)
+      myproc()->ofile[fd0] = 0;
+    fileclose(rf);
+    fileclose(wf);
+    return -1;
+  }
+  fd[0] = fd0;
+  fd[1] = fd1;
+  return 0;
+}
diff --git a/trap.c b/trap.c
index 41c66eb..6cec6f4 100644
--- a/trap.c
+++ b/trap.c
@@ -77,7 +77,13 @@ trap(struct trapframe *tf)
             cpuid(), tf->cs, tf->eip);
     lapiceoi();
     break;
-
+  case T_PGFLT: {
+	  struct proc *p = myproc();
+	  if (p != 0 && !is_shell_or_init(p) && (tf->cs&3) == DPL_USER && is_page_in_disk(p, rcr2()) &&
+	    swap_in(p, rcr2())) {
+		  break;
+	  }
+  }
   //PAGEBREAK: 13
   default:
     if(myproc() == 0 || (tf->cs&3) == 0){
diff --git a/vm.c b/vm.c
index 7134cff..ba88f2c 100644
--- a/vm.c
+++ b/vm.c
@@ -7,6 +7,8 @@
 #include "proc.h"
 #include "elf.h"
 
+const uint FIFO = 1; // if 1, fifo algo. if 0, nru algo
+
 extern char data[];  // defined by kernel.ld
 pde_t *kpgdir;  // for use in scheduler()
 
@@ -216,6 +218,15 @@ loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
   return 0;
 }
 
+void print_queues(struct proc* p) {
+  cprintf("idx--va--state  (memory: left side, disk: right side)\n");
+  for(int i=0; i <MAX_PSYC_PAGES; i++) {
+    cprintf("%d %d %d", i, p->mem_pg_info[i].va, p->mem_pg_info[i].state);
+    cprintf("\t%d %d %d\n", i, p->disk_pg_info[i].va, p->disk_pg_info[i].state);
+  }
+  cprintf("\n");
+}
+
 // Allocate page tables and physical memory to grow process from oldsz to
 // newsz, which need not be page aligned.  Returns new size or 0 on error.
 int
@@ -223,12 +234,18 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 {
   char *mem;
   uint a;
+  struct proc* p = myproc();
 
   if(newsz >= KERNBASE)
     return 0;
   if(newsz < oldsz)
     return oldsz;
 
+  // paging: check if number of pages exceeds max number of pages
+  if (PGROUNDUP(newsz)/PGSIZE > MAX_TOTAL_PAGES && !is_shell_or_init(p)) {
+  	panic("number of pages exceeds maximum value!");
+  }
+
   a = PGROUNDUP(oldsz);
   for(; a < newsz; a += PGSIZE){
     mem = kalloc();
@@ -244,6 +261,18 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
       kfree(mem);
       return 0;
     }
+
+    // paging: insert into page info list for memory
+    if (p && !is_shell_or_init(p)) {
+	    if (!is_queue_full(p)) {
+        insert_mem_pg_info(p, pgdir, a);
+        cprintf("\n");
+      } else {
+        swap_out(p);
+        insert_mem_pg_info(p, pgdir, a);
+        print_queues(p);
+      }
+    }
   }
   return newsz;
 }
@@ -255,6 +284,9 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 int
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 {
+  struct proc* p = myproc();
+  if(p == 0) return oldsz;
+  
   pte_t *pte;
   uint a, pa;
 
@@ -272,6 +304,8 @@ deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
         panic("kfree");
       char *v = P2V(pa);
       kfree(v);
+      // paging: remove from queue
+      if(!is_shell_or_init(p)) remove_pg_from_mem(p, a, pgdir);
       *pte = 0;
     }
   }
@@ -315,6 +349,9 @@ clearpteu(pde_t *pgdir, char *uva)
 pde_t*
 copyuvm(pde_t *pgdir, uint sz)
 {
+  struct proc* p = myproc();
+  if(p == 0) return 0;
+
   pde_t *d;
   pte_t *pte;
   uint pa, i, flags;
@@ -325,6 +362,13 @@ copyuvm(pde_t *pgdir, uint sz)
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
       panic("copyuvm: pte should exist");
+    
+    // paging: update PG flag
+    if (*pte & PTE_PG) {
+      update_pageout_flags(p, i, d);
+      continue;
+    }
+
     if(!(*pte & PTE_P))
       panic("copyuvm: page not present");
     pa = PTE_ADDR(*pte);
@@ -392,3 +436,174 @@ copyout(pde_t *pgdir, uint va, void *p, uint len)
 //PAGEBREAK!
 // Blank page.
 
+uint get_pa(int va, pde_t *pgdir){
+  pte_t* pte = walkpgdir(pgdir, (int*)va, 0);
+  if(!pte) return -1;
+  return PTE_ADDR(*pte);
+}
+
+void update_pageout_flags(struct proc* p, int va, pde_t * pgdir){
+  pte_t *pte = walkpgdir(pgdir, (int*)va, 0);
+  if (!pte) panic("update_pageout_flags: pte doesn't exist!");
+  *pte |= PTE_PG;
+  *pte &= ~PTE_P;
+  *pte &= PTE_FLAGS(*pte);
+}
+
+void update_pagein_flags(struct proc* p, int va, int pg_pa, pde_t * pgdir){
+  pte_t *pte = walkpgdir(pgdir, (int*)va, 0);
+  if (!pte) panic("update_pagein_flags: pte doesn't exist!");
+  if (*pte & PTE_P) panic("update_pagein_flags: page is already in memory!");
+  *pte |= PTE_P | PTE_U | PTE_A;
+  *pte &= ~PTE_PG;
+  *pte |= pg_pa;
+}
+
+uint is_page_in_disk(struct proc *p, int va) {
+  pte_t *pte;
+  pte = walkpgdir(p->pgdir, (char *)va, 0);
+  return (*pte & PTE_PG);
+}
+
+void swap_out(struct proc *p) {
+  int pg_idx = -1;
+  if(FIFO) pg_idx = get_queue_head_idx(p);
+  else pg_idx = get_nru_oldest_idx(p);
+  struct pg_info out_pg_info = p->mem_pg_info[pg_idx];
+
+  // writes into swap file
+  page_out(p, out_pg_info.va, out_pg_info.pgdir, out_pg_info.ref, out_pg_info.mod);
+  uint pg_pa = get_pa(out_pg_info.va, out_pg_info.pgdir);
+  kfree((char*)P2V(pg_pa));
+  update_pageout_flags(p, out_pg_info.va, out_pg_info.pgdir);
+  reset_mem_pg_info(p, pg_idx);
+  shift_queue_head(p);
+  cprintf("swap out idx: %d\n", pg_idx);
+}
+
+int swap_in(struct proc* p, int trap_va) {
+  p->pg_fault_count++;
+  trap_va = PGROUNDDOWN(trap_va);
+  cprintf("\033[0;31mtrap_va = %d\033[0m\n", trap_va);
+
+  // allocate space for the swapped in page
+  char* new_page = kalloc();
+  memset(new_page, 0, PGSIZE);
+
+  if (!is_queue_full(p)) {
+    int swap_in_idx = -1;
+    if(FIFO) swap_in_idx = get_queue_tail_idx(p);
+    else swap_in_idx = get_nru_free_slot_idx(p);
+	  cprintf("swap in: (free)index = %d\n", swap_in_idx);
+    update_pagein_flags(p, trap_va, V2P(new_page), p->pgdir);
+    page_in(p, swap_in_idx, trap_va, (char*)trap_va);
+    print_queues(p);
+    return 1;
+  }
+
+  /*no free page available, need to swap out one*/
+
+  int swap_out_idx = -1;
+  if(FIFO) swap_out_idx = get_queue_head_idx(p);
+  else swap_out_idx = get_nru_oldest_idx(p);
+  cprintf("swap in: index = %d\n", swap_out_idx);
+  struct pg_info out_pg_info = p->mem_pg_info[swap_out_idx];
+
+  // paging in
+  char buff[PGSIZE];
+  update_pagein_flags(p, trap_va, V2P(new_page), p->pgdir);
+  page_in(p, swap_out_idx, trap_va, buff);
+  memmove(new_page, buff, PGSIZE);
+
+  // paging out
+  page_out(p, out_pg_info.va, out_pg_info.pgdir, out_pg_info.ref, out_pg_info.mod);
+  uint pg_pa = get_pa(out_pg_info.va, out_pg_info.pgdir);
+  kfree((char*)P2V(pg_pa));
+  update_pageout_flags(p, out_pg_info.va, out_pg_info.pgdir);
+  shift_queue_head(p);
+  print_queues(p);
+  return 1;
+}
+
+void insert_mem_pg_info(struct proc *p, pde_t *pgdir, uint va) {
+  int index = -1;
+  if(FIFO) index = get_queue_tail_idx(p);
+  else index = get_nru_free_slot_idx(p);
+  p->mem_pg_info[index].state = USED;
+  p->mem_pg_info[index].va = va;
+  p->mem_pg_info[index].pgdir = pgdir;
+  p->mem_pg_info[index].ref = 1;
+  p->mem_pg_info[index].mod = 0;
+  p->mem_pg_count++;
+  cprintf("insert into memory: idx = %d, va = %d\n", index, va);
+}
+
+void remove_pg_from_mem(struct proc *p, uint va, const pde_t *pgdir){
+  if (p == 0) return;
+  for (int i = 0; i < MAX_PSYC_PAGES; i++) {
+    if (p->mem_pg_info[i].state == USED && p->mem_pg_info[i].va == va
+      && p->mem_pg_info[i].pgdir == pgdir) {
+      cprintf("removing from memory: va = %d\n", va);
+      reset_mem_pg_info(p, i);
+      if(FIFO) adjust_queue(p, i);
+      print_queues(p);
+      return;
+    }
+  }
+}
+
+void reset_mem_pg_info(struct proc *p, int index){
+  p->mem_pg_info[index].state = NOT_USED;
+  p->mem_pg_count--;
+}
+
+uint is_queue_full(const struct proc *p) {
+  return p->mem_pg_count == MAX_PSYC_PAGES;
+}
+
+int get_queue_tail_idx(const struct proc *p) {
+  return (p->queue_head_idx + p->mem_pg_count) % MAX_PSYC_PAGES;
+}
+
+int get_queue_head_idx(const struct proc *p) {
+  return p->queue_head_idx;
+}
+
+void shift_queue_head(struct proc *p) {
+  p->queue_head_idx = (p->queue_head_idx + 1) % MAX_PSYC_PAGES;
+}
+
+void adjust_queue(struct proc *p, int from) {
+  if (from < 0) panic("adjust queue: invalid argument!");
+  for (int i = from, nxt_idx = (from + 1) % MAX_PSYC_PAGES;
+       nxt_idx != (get_queue_tail_idx(p) + 1) % MAX_PSYC_PAGES; nxt_idx = (nxt_idx + 1) % MAX_PSYC_PAGES) { ;
+    if (p->mem_pg_info[i].state == NOT_USED && p->mem_pg_info[nxt_idx].state == USED) {
+      p->mem_pg_info[i] = p->mem_pg_info[nxt_idx];
+      p->mem_pg_info[nxt_idx].state = NOT_USED;
+      i = nxt_idx;
+    } else if (p->mem_pg_info[i].state == USED) i = nxt_idx;
+  }
+}
+
+int get_nru_free_slot_idx(const struct proc *p) {
+  for (int i = 0; i < MAX_PSYC_PAGES; ++i) {
+    if(p->mem_pg_info[i].state == NOT_USED) return i;
+  }
+  panic("nru: no free slot");
+}
+
+int get_nru_oldest_idx(const struct proc *p) {
+  for (int i = 0; i < MAX_PSYC_PAGES; ++i) {
+    if(p->mem_pg_info[i].state == USED && !p->mem_pg_info[i].ref && !p->mem_pg_info[i].mod) return i;
+  }
+  for (int i = 0; i < MAX_PSYC_PAGES; ++i) {
+    if(p->mem_pg_info[i].state == USED && !p->mem_pg_info[i].ref && p->mem_pg_info[i].mod) return i;
+  }
+  for (int i = 0; i < MAX_PSYC_PAGES; ++i) {
+    if(p->mem_pg_info[i].state == USED && p->mem_pg_info[i].ref && p->mem_pg_info[i].mod) return i;
+  }
+  for (int i = 0; i < MAX_PSYC_PAGES; ++i) {
+    if(p->mem_pg_info[i].state == USED) return i;
+  }
+  panic("nru: no used page!");
+}
\ No newline at end of file
